# all figures are collections of points. lines are drawn through the closest point in the figure. lines are defined through two points. the drawer should handle the rest.

#
define_class figure(){
    var lines = []
    var message = ""
    var centerpoint = [0, 0]
    self.isclosed = 0
    define initialization(self, funny, isclosed, centerpoint){ #initialization should be the constructor function, meaning it will run as soon as the obj is created
        self.message = "initializing variables"
        self.isclosed = isclosed
        self.centerpoint = centerpoint
        var points = []
        self.message = "gathering points"
        for x,y in funny[0], funny[1] do: #i do believe this will work. Else im fucked :>
            points.append([x,y])
        self.message = "initializing lines"
        self.makelines(points)
    }
    define makelines(self, points){
        #a line should be as such -> [[x1,x2,y1,y2],[x1,x2,y1,y2],..., [x1,x2,y1,y2]]
        #                               line 1          line2            line n
        #where points should be [x,y]
        #the drawer should be able to handle the rest
        z = len(self.points) #this must return the number of objects inside this vector
        if self.isclosed != 1:
            z = z-1
        var pointa = []
        var pointb = []
        for(i in range(z)) do: #meaning it should run from 0 to z-1, which is the range function in python
            """
                assuming the length of points is 84, if it is closed, it should run till the z = 82 and then,
                when i = 83, it should close the figure with the first point. Very fun(ny)!!1!
            """
            if i == (len(self.points)-1) do: #this links the last point with the first. will only activate if isclosed
                pointa = [self.points[i][0],self.points[i][1]]
                pointb = [self.points[0][0],self.points[0][1]]
            else:
                pointa = [self.points[i][0],self.points[i][1]]
                pointb = [self.points[i+1][0],self.points[i+1][1]]
            #registerpoints as lines
            self.line.append([pointa[0],pointb[0],pointa[1],pointb[1]]) #meaning this guys gets a full list of lines.
            #clear points for further loop use.
            pointa = []
            pointb = []
    }
    define destruction(){
        #i do believe this should go ahead and free the space or something, but 
        #at least in python we got garbage collection and stuff.
    }

}

"""
this is a long comment. Everything in between the three thingys are considered comments.
to create a figure object, one should give the figure object a vector containing the points which generate the figure in a cartesian plain.
the figures may be moved by the drawer, but on should give the points referencing a center, which will be moved by the drawer which will use a center point.
if a figure is closed, the last point in the list will be linked to the first by a line. Else, this line does not exist and the figure is open

"""

define figurecreationtest(){
    vectorxy = [[0,1,2,3],[0,1,2,3]]
    somefigure = figure(vectorxy)
}